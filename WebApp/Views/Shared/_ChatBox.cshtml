@using System.Security.Claims
@{
    var isLoggedIn = User.Identity.IsAuthenticated;
    var userId = isLoggedIn ? User.FindFirst(ClaimTypes.NameIdentifier)?.Value : null;
}

@if (isLoggedIn)
{
    <div id="chatBubble" style="position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; background-color: #007bff; border-radius: 50%; cursor: pointer; text-align: center; line-height: 60px; color: white;">
        Chat
    </div>

    <div id="chatBox" style="display: none; position: fixed; bottom: 100px; right: 20px; width: 300px; height: 400px; background-color: white; border: 1px solid #ccc; border-radius: 5px; overflow: hidden;">
        <div id="messageContainer" style="height: 320px; overflow-y: auto; padding: 10px;">
            <!-- Tin nhắn sẽ được thêm động bằng JS -->
        </div>
        <div style="position: absolute; bottom: 0; width: 100%; padding: 10px; border-top: 1px solid #ccc;">
            <input type="text" id="messageInput" style="width: 70%;" placeholder="Type a message..." />
            <button id="sendButton" style="width: 25%;">Send</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        const currentUserId = "@userId";

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().then(() => {
            console.log("Connected to SignalR Hub");
        }).catch(err => console.error(err));

        connection.on("ReceiveMessage", (message) => {
            const messageContainer = document.getElementById("messageContainer");
            const isSender = message.senderId === currentUserId;
            const messageDiv = document.createElement("div");
            messageDiv.style.margin = "10px 0";
            messageDiv.style.padding = "10px";
            messageDiv.style.borderRadius = "5px";
            messageDiv.style.maxWidth = "70%";

            if (isSender) {
                messageDiv.style.backgroundColor = "#007bff";
                messageDiv.style.color = "white";
                messageDiv.style.marginLeft = "auto";
            } else {
                messageDiv.style.backgroundColor = "#ccc";
            }

            messageDiv.innerHTML = `
                <strong>${message.senderName}</strong> (${message.sentAt})<br/>
                ${message.content}
            `;
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        document.getElementById("chatBubble").addEventListener("click", () => {
            const chatBox = document.getElementById("chatBox");
            chatBox.style.display = chatBox.style.display === "none" ? "block" : "none";
        });

        document.getElementById("sendButton").addEventListener("click", () => {
            const messageInput = document.getElementById("messageInput");
            const content = messageInput.value.trim();
            if (content) {
                connection.invoke("SendMessage", currentUserId, null, content)
                    .catch(err => console.error(err));
                messageInput.value = "";
            }
        });

        document.getElementById("chatBubble").addEventListener("dblclick", () => {
            connection.invoke("RequestSupport", currentUserId)
                .catch(err => console.error(err));
            alert("Support request sent to Admin!");
        });
    </script>
}