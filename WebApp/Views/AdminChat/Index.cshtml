@using System.Security.Claims
@model IEnumerable<Message>
@{
    ViewData["Title"] = "Admin Chat";
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

    // Lấy danh sách Customer đã gửi tin nhắn
    var customers = Model
        .GroupBy(m => m.SenderId)
        .Select(g => new
        {
            SenderId = g.Key,
            SenderName = g.First().Sender?.UserName ?? "Unknown",
            LatestMessageTime = g.Max(m => m.SentAt)
        })
        .OrderByDescending(c => c.LatestMessageTime)
        .ToList();

    // Lấy customerId từ tham số URL hoặc mặc định là Customer đầu tiên trong danh sách
    var selectedCustomerId = ViewBag.CustomerId ?? (customers.Any() ? customers.First().SenderId.ToString() : null);
}

<div class="admin-margin">
    <h2>Manage Customer Messages</h2>

    <div style="display: flex; height: 500px;">
        <!-- Cột trái: Danh sách Customer -->
        <div style="width: 30%; border-right: 1px solid #ccc; overflow-y: auto; padding: 10px;">
            <h4>Customers</h4>
            @if (customers.Any())
            {
                <ul style="list-style: none; padding: 0;">
                    @foreach (var customer in customers)
                    {
                        <li style="padding: 10px; cursor: pointer; @(customer.SenderId.ToString() == selectedCustomerId ? "background-color: #e0e0e0;" : "")"
                            onclick="selectCustomer('@customer.SenderId')">
                            <strong>@customer.SenderName</strong><br />
                            <small>@customer.LatestMessageTime.ToString("g")</small>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No customers have messaged yet.</p>
            }
        </div>

        <!-- Cột phải: Tin nhắn của Customer được chọn -->
        <div style="width: 70%; display: flex; flex-direction: column; padding: 10px;">
            <div id="messageContainer" style="flex: 1; overflow-y: auto; padding: 10px;">
                @if (selectedCustomerId != null)
                {
                    var messages = Model.Where(m => m.SenderId.ToString() == selectedCustomerId || m.AdminId.ToString() == selectedCustomerId);
                    foreach (var message in messages)
                    {
                        var isSender = message.SenderId.ToString() == userId;
                        <div style="margin: 10px 0; padding: 10px; border-radius: 5px; max-width: 70%; @(isSender ? "background-color: #007bff; color: white; margin-left: auto;" : "background-color: #ccc;")">
                            <strong>@(message.Sender?.UserName ?? "Unknown")</strong> (@message.SentAt.ToString("g"))<br />
                            @message.Content
                        </div>
                    }
                }
                else
                {
                    <p>Select a customer to view messages.</p>
                }
            </div>
            <div style="padding: 10px; border-top: 1px solid #ccc;">
                <input type="text" id="messageInput" style="width: 70%;" placeholder="Type a message..." />
                <button id="sendButton" style="width: 25%;">Send</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentUserId = "@userId";
    let selectedCustomerId = "@selectedCustomerId"; // Customer được chọn mặc định

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start().then(() => console.log("Connected")).catch(err => console.error(err));

    connection.on("ReceiveMessage", (message) => {
        // Chỉ hiển thị tin nhắn nếu nó liên quan đến Customer được chọn
        if (message.senderId === selectedCustomerId || message.receiverId === selectedCustomerId) {
            const messageContainer = document.getElementById("messageContainer");
            const isSender = message.senderId === currentUserId;
            const messageDiv = document.createElement("div");
            messageDiv.style.margin = "10px 0";
            messageDiv.style.padding = "10px";
            messageDiv.style.borderRadius = "5px";
            messageDiv.style.maxWidth = "70%";

            if (isSender) {
                messageDiv.style.backgroundColor = "#007bff";
                messageDiv.style.color = "white";
                messageDiv.style.marginLeft = "auto";
            } else {
                messageDiv.style.backgroundColor = "#ccc";
            }

            messageDiv.innerHTML = `
                <strong>${message.senderName}</strong> (${message.sentAt})<br/>
                ${message.content}
            `;
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;

            if (!isSender && !message.isRead) {
                connection.invoke("MarkAsRead", message.id);
            }
        }
    });

    connection.on("SupportRequested", (customerName) => {
        alert(`New support request from ${customerName}`);
        // Tải lại trang để cập nhật danh sách Customer
        window.location.reload();
    });

    document.getElementById("sendButton").addEventListener("click", () => {
        const messageInput = document.getElementById("messageInput");
        const content = messageInput.value.trim();
        if (content) {
            if (!selectedCustomerId) {
                alert("Please select a customer to send the message to!");
                return;
            }
            connection.invoke("SendMessage", currentUserId, selectedCustomerId, content)
                .catch(err => console.error(err));
            messageInput.value = "";
        }
    });

    function selectCustomer(customerId) {
        selectedCustomerId = customerId;
        // Cập nhật giao diện: làm nổi bật Customer được chọn
        document.querySelectorAll("li").forEach(li => {
            li.style.backgroundColor = "";
        });
        event.currentTarget.style.backgroundColor = "#e0e0e0";

        // Tải lại tin nhắn của Customer được chọn
        fetch(`/AdminChat/GetMessages?customerId=${customerId}`)
            .then(response => response.json())
            .then(messages => {
                const messageContainer = document.getElementById("messageContainer");
                messageContainer.innerHTML = "";
                messages.forEach(message => {
                    const isSender = message.senderId === currentUserId;
                    const messageDiv = document.createElement("div");
                    messageDiv.style.margin = "10px 0";
                    messageDiv.style.padding = "10px";
                    messageDiv.style.borderRadius = "5px";
                    messageDiv.style.maxWidth = "70%";

                    if (isSender) {
                        messageDiv.style.backgroundColor = "#007bff";
                        messageDiv.style.color = "white";
                        messageDiv.style.marginLeft = "auto";
                    } else {
                        messageDiv.style.backgroundColor = "#ccc";
                    }

                    messageDiv.innerHTML = `
                        <strong>${message.senderName}</strong> (${message.sentAt})<br/>
                        ${message.content}
                    `;
                    messageContainer.appendChild(messageDiv);
                });
                messageContainer.scrollTop = messageContainer.scrollHeight;
            })
            .catch(err => console.error(err));
    }
</script>